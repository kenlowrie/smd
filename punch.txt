Punch List Items.
-----------------

Priority 1 | p1
---------------
01. document the key elements (@var, @html, @link, @code, @image, etc.) -- use the "tests/in" files to make it "current".
60. Need to implement the code for detecting/monitoring multiple files. would make it easier to debug...
30. if multiple cssfiles on command line xface of ismd and smdparse, need to add them to the "watch" list.
55. Is @break useful? What about @exit?
56. See how close I can get to a clean render of Buddy's music video script markdown file...

Priority 3 | p3
---------------
38. build out initial version of smdlive
52. Is raw still needed? Can we deprecate that too? Or should I keep it as a way of more easily writing documentation? maybe @@some stuff@@? I'm not so sure. I think before it was just to prevent the <div class="extras">, in which case, that isn't needed, since we no longer wrap things, you can write HTML directly...
54. Do a pass to remove all the alias definitions from the various markdown files, since that is deprecated. F=^\[([a-zA-Z0-9_]*)\]=(.*)  R=@var $1="$2"
57. Do I need a way to force all lines into a divExtras like before? maybe a @default wrap="html.key" and so html.div would wrap using that variables .< and .> so classes, etc., would just work. might need to be special keywork, like @wrap html.key so it's easy to use inline. such as: @wrap html.p.


Priority 3 | p3
---------------
3. Split A/V specific CSS to separate file.
4. Replace special code relating to A/V scripts with namespace variables (where possible).
14. Import: can I address the $ side effect? Perhaps with -d|--tld <top_level_path> for when stdin is used as top level?
22. SystemDefaults() needs some TLC. Think about dumping and where it's overidden. 
25. in smdparse(), I should return an object with relevant info in it: list of files read, string representation of output?, other useful stuff.
32. add --developer mode that enables certain flags (like debug=on), and some other builtins that are useful for debugging.
33. --developer mode should automatically run a bunch of commands that dump the environment, etc., so you can see what you have.34. release version 0.4.2 of the master repo (i.e. do a pull request from the specific branch.)
35. document using this with pipenv (possibly other "popular" python environment manager(s))
36. create an "early" sample that exposes an endpoint and/or localfile for use by OBS as POC.
44. Code review Cache, ImportCache & SystemDefaults.
50. Clean up how ismd does the multiple monitors

Priority 5 | p5
---------------
05. might be nice if you could pass a flag to tell it not to lstrip() blanks when loading the .html files
31. maybe add a watchdir, watchlist or similar option(s)
43. Should I use the python logging system for better control of debug messages and console output?
53. Do a quick pass on the userdoc.md to see how badly I've broken the code. I/P. Needs work, but not as bad as I thought it might be.
37. how about a "vscode" plug-in/extension that would display in either HTML or "browser" mode. Is that possible? Priority?


Completed
---------
**5. Figure out how to implement the outer HTML Tag support
**6. Figure out how to implement the <head></head> support
**7. Implement the @embed support for inlining HTML, script, content, etc, without processing. [done]
**18. Update the modified event to only track changes to the specific files being updated, instead of entire directory.
**19. Use a thread to run the window mainloop, so Tk refreshes more often, like when you are dragging the scroll bar, etc. couldn't make this work, gave up for now.
**21. Review all the mindmaps, evernotes, etc., and make 1 consolidated list (here) of the things I need to be focused on.
**23. Implement the builtins.md and *-html.md loading in smd.py, then switch ismd to use smdparse instead of livesmd.
**26. Decide if the --load-default-builtins=Y|N, --load-user_bulitins=Y|N, etc., belong with smd.py, or an outer (livesmd, smdparse, ismd) script...
**28. add something to pull in "user-builtins.md", maybe in the ~ folder, as .smd-builtins
**29. cmdline switch to tell it to NOT load them, useful for testing, so we dont' introduce ambiguous variables.
**34. move doc.md testing code to other file. common.md and report.md
**35. Python 3.6 or later because we use f-strings
**36. Python 3.7 or later because it guarantees keys dictionary stays in insertion order
**20. builtins.md collection of @imports instead of one file, so you can easily get what you want. I/P
**03. make the "defaults" make sense. i.e. cssfile, page title, etc.
**04. do I need to implement a scheme to handle "-f filename.md" config_default_file that gets loaded just before the html document processing? -i/--import
**42. The line caching logic is flawed. it returns all the lines one by one, then proceses the imports. wtf?
**27. rename livesmd.py -> smdlive. This is the one that should operate an endpoint
**47. figure out how to do a source level debug of the code. just load debug.py into vscode, set a breakpoint, and debug it.
**46. Need to be able to launch dual monitors (-m hostgui and -m browser)
**60. remove the var="value" support from namespaces where it doesn't make sense. 
**45. Should the ConfigFileObject... classes be part of the cache module?
**02. remove all the old peekline, ... bs from the mainloop. we need to kiss.
**51. Remove alias support. ability to [var]=value. You must use @var id="_" attr="x"
**24. @dump defaults="." is kind of dumb. Rethink it, make it nicer and prettier to output.





1. Finish up livesmd.py and release
4. Move all of these things to the issues tracker in github, and get rid of this file.

Bugs/Fixes Needed
-----------------
Look to see if I can make further improvements with speed. Cut down 40% of the calls
to markdown by only calling _md with lines that request the "marked_down" line...
Use python -m profile debug.py (debug.py loads and runs avscript -f ...)

Need ability to display error messages on ambiguous variable names.
@debug on="ns.add". Might need to spruce it up a bit. If you specify
a namespace, should this be okay? Because we rely on this for image.name
and var.name, as a way to create linked shots... 

Is the raw I have implemented any good? Or should I make it so it's done
in the namespaces module with an optional parameter, and then use @code
macros to access any element in raw form?

Remove unused code in .core module

Minor annoyance when dumping debug messages, during shots, the formatting
is getting messed up. Most likely due to somewhere we are not escaping HTML
output (maybe markdown, but that gets sketchy, so maybe not fixable)...

--------------------
Things to test:

Document:

Rainy Day Fixes/Changes:

Parenthesis inside a variable string doesn't parse correctly
For now, the solution is to use html entities (&lpar; and &rpar;)
e.g. [var.section(t="Scene 15 - Location S3:42 L:~8s (Ending Instrumental)")]

Fix bug where ' inside a string [var.attr(a="this doesnâ€™t work")]
--workaround use &apos;

Can I change the HTML formatting from before hand to on the backend, when I actually output?
That would enable me to more readily detect unbalanced tags
And I could format the output so it's nice and easy to read.

